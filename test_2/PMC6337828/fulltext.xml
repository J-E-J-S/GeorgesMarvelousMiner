<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">6337828</article-id><article-id pub-id-type="publisher-id">2612</article-id><article-id pub-id-type="doi">10.1186/s12859-019-2612-0</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>Barcode identification for single cell genomics</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Tambe</surname><given-names>Akshay</given-names></name><address><email>akshay.tambe@caltech.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Pachter</surname><given-names>Lior</given-names></name><address><email>lpachter@caltech.edu</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000000107068890</institution-id><institution-id institution-id-type="GRID">grid.20861.3d</institution-id><institution>Division of Biology and Biological Engineering, </institution><institution>California Institute of Technology, </institution></institution-wrap>116 Kerckhoff Laboratory, Pasadena, CA 91125 USA </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000107068890</institution-id><institution-id institution-id-type="GRID">grid.20861.3d</institution-id><institution>Departments of Biology and Computing &#x00026; Mathematical Sciences, </institution><institution>California Institute of Technology, </institution></institution-wrap>116 Kerckhoff Laboratory, Pasadena, CA 91125 USA </aff></contrib-group><pub-date pub-type="epub"><day>17</day><month>1</month><year>2019</year></pub-date><pub-date pub-type="pmc-release"><day>17</day><month>1</month><year>2019</year></pub-date><pub-date pub-type="collection"><year>2019</year></pub-date><volume>20</volume><elocation-id>32</elocation-id><history><date date-type="received"><day>23</day><month>5</month><year>2017</year></date><date date-type="accepted"><day>7</day><month>1</month><year>2019</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s). 2019</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><abstract id="Abs1"><sec><title>Background</title><p id="Par1">Single-cell sequencing experiments use short DNA barcode &#x02018;tags&#x02019; to identify reads that originate from the same cell. In order to recover single-cell information from such experiments, reads must be grouped based on their barcode tag, a crucial processing step that precedes other computations. However, this step can be difficult due to high rates of mismatch and deletion errors that can afflict barcodes.</p></sec><sec><title>Results</title><p id="Par2">Here we present an approach to identify and error-correct barcodes by traversing the de Bruijn graph of circularized barcode k-mers. Our approach is based on the observation that circularizing a barcode sequence can yield error-free k-mers even when the size of <italic>k</italic> is large relative to the length of the barcode sequence, a regime which is typical single-cell barcoding applications. This allows for assignment of reads to consensus fingerprints constructed from k-mers.</p></sec><sec><title>Conclusion</title><p id="Par3">We show that for single-cell RNA-Seq circularization improves the recovery of accurate single-cell transcriptome estimates, especially when there are a high number of errors per read. This approach is robust to the type of error (mismatch, insertion, deletion), as well as to the relative abundances of the cells. Sircel, a software package that implements this approach is described and publically available.</p></sec><sec><title>Electronic supplementary material</title><p>The online version of this article (10.1186/s12859-019-2612-0) contains supplementary material, which is available to authorized users.</p></sec></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Single-cell</kwd><kwd>Barcodes</kwd><kwd>Barcode identification</kwd><kwd>de Bruijn graph</kwd><kwd>Circularization</kwd><kwd>K-mer counting</kwd></kwd-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000002</institution-id><institution>National Institutes of Health</institution></institution-wrap></funding-source></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s) 2019</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Background</title><p id="Par4">Tagging of sequencing reads with short DNA barcodes is a common experimental practice that enables a pooled sequencing library to be separated into biologically meaningful partitions. This technique is in the cornerstone of many single-cell sequencing experiments, where reads originating from individual cells are tagged with cell-specific barcodes; as such, the first step in any single-cell sequencing experiment involves separating reads by barcode to recover single-cell profiles ([<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR22">22</xref>]. For example, in the Drop-Seq protocol, which is a popular microfluidic-based single-cell experimental platform, DNA barcodes are synthesized on a solid bead support, using split-and-pool DNA synthesis [<xref ref-type="bibr" rid="CR10">10</xref>], and this approach has been applied to obtain single-cell transcriptome profiles from a number of model- and non-model organisms [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR19">19</xref>, <xref ref-type="bibr" rid="CR21">21</xref>]. Similar split-and-pool barcoding strategies are used in other single-cell sequencing assays such as Seq-Well [<xref ref-type="bibr" rid="CR4">4</xref>] and Split-seq [<xref ref-type="bibr" rid="CR14">14</xref>]. One consequence of this synthetic technique is that deletion errors are extremely prevalent; by some estimates 25% of all barcode sequences observed contain at least one deletion [<xref ref-type="bibr" rid="CR10">10</xref>]. Ignoring such errors can therefore dramatically lower the number of usable reads in a dataset, while incorrectly grouping reads together can confound single cell analysis.</p><p id="Par5">Current approach to &#x0201c;barcode calling&#x0201d;, the process of grouping reads together by barcode, use simple heuristics to first identify barcodes that are likely to be uncorrupted, and then &#x0201c;error correct&#x0201d; remaining barcodes to increase yields. However the complex nature of errors, that unlike sequencing based error also include deletions, can lead to large number of discarded reads (reads that could not be assigned to a barcode) [<xref ref-type="bibr" rid="CR10">10</xref>]. Additionally, some current approaches require that the approximate number of cells in the experiment be known beforehand, and in some experimental contexts such information is not easily obtained.</p><p id="Par6">In such experiments, there are two major approaches toward generating barcodes. In the used by 10&#x000d7; Genomics among others, barcodes drawn are from a known &#x02018;whitelist&#x02019; of sequences, and as such this prior knowledge of a whitelist can be used to simplify error-correction and read assignment. On the other hand, the barcodes generated though split-pool synthesis (including Drop-seq) are random and no prior information can be used for either error-correction or read assignment. The problem of identifying true barcodes from among many sequences corrupted by mismatch and deletion errors seemingly requires a multiple sequence alignment, from which errors can be detected and corrected [<xref ref-type="bibr" rid="CR24">24</xref>]. However unlike standard biological sequence alignment settings, the single-cell barcode identification problem requires analysis of millions, if not billions of different sequences. On the other hand, the problem is constrained in that the sequences are short (barcodes are typically 10&#x02013;16&#x02009;bp long) and the length of each barcode is the same and known.</p><p id="Par7">Here, we present a fast and error-robust k-mer based approach to detecting random barcodes from sequencing data. Our software circumvents the need for complete (and intractable) multiple sequence alignment, by making use of the idea of circularizing the sequences that are to be error corrected, and rather than pursuing a multiple sequence alignment approach, we instead borrow ideas from genome assembly. However unlike assembly methods developed for reconstructing circular genomes [<xref ref-type="bibr" rid="CR5">5</xref>] our use of circularization is merely a method for adding robustness to the k-mer fingerprinting of barcodes.</p><p id="Par8">Our methods are implemented in software called Sircel whose input is a list of reads and which outputs the number and sequences of cell-barcodes from error-containing datasets in an unbiased manner. Our implementation is robust to insertion, deletion, and mismatch errors, and requires a minimal number of user-inputted parameters. The output is compatible with downstream single-cell analysis tools such as kallisto [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR11">11</xref>].</p></sec><sec id="Sec2"><title>Implementation</title><p id="Par9">K-mer counting is a fast and well-established technique that has previously been used to dramatically speed up the assignment of reads to transcripts for RNA-seq (N. L. [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR12">12</xref>]; Z. [<xref ref-type="bibr" rid="CR23">23</xref>]) and metagenomics[<xref ref-type="bibr" rid="CR17">17</xref>] and as such might be applicable to barcode calling. We reasoned that by counting k-mers we could rapidly identify error-free subsequences within the context of a larger error-containing read. [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR18">18</xref>] The intuition behind our approach lies in the fact that while many copies of the same barcode may contain a different profile of errors, pairs of such barcodes may share some overlapping subsequence that is error free. However as the barcode errors are expected to be random, it is unlikely that several reads will share the exact same error pattern. Thus, multiple error-containing reads will share k-mers only in their error-free regions where the overlap, while the error-containing k-mers are expected to be unique. As such, frequently occurring k-mers would arise from error-free regions of barcodes, while much less overlap would be expected from error-prone k-mers. Similar reasoning has been previously used to rapidly detect and reject error-containing reads from RNA-seq and DNA assembly [<xref ref-type="bibr" rid="CR9">9</xref>, <xref ref-type="bibr" rid="CR18">18</xref>].</p><p id="Par10">One difficulty associated with error-correcting barcodes using this technique lies in the fact that barcodes are typically very short: for example Drop-Seq barcodes are 12 base pairs long. Conversely in order for a k-mer counting approach to be feasible we must pick a moderately large value for <italic>k</italic>, typically <italic>k&#x02009;=&#x02009;8</italic>. As a result there are many positions on a barcode where a single error would ensure that none of its k-mers are shared with an error-free barcode. To circumvent this problem we circularize the barcode sequences before counting k-mers; this ensures that barcodes containing a single mismatch error still share k-mers with the error-free sequence, independent of where the error occurred within the barcode (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref>a).<fig id="Fig1"><label>Fig. 1</label><caption><p>A strategy to use k-mer counting to identify sequence barcodes. <bold>a</bold> Circularizing barcodes ensures robustness against single mismatches. An example sequence &#x02018;BARCODE&#x02019; contains an error (highlighted in red). When the barcode sequence is short relative to k, all k-mers from this sequence will contain the mutated base. Circularizing the sequence (bottom) ensures that there will be some error-free k-mers from a sequence independent of the position of the error. <bold>b</bold> An example circular k-mer graph containing one barcode. Error-containing reads were simulated from a ground-truth barcode. Reads were circularized and k-mers were counted. The resultant k-mer graph is plotted here. Nodes in this graph are represented as gray dots, and edges as blue lines. Edges weights are represented by shading (dark&#x02009;=&#x02009;high edge weight). Despite a fairly high rate of error (Poisson 3 errors per 12 nucleotide barcode), the true barcode path is visually discernable with a modest number of reads. <bold>c</bold> An example circular k-mer graph containing three barcodes. Same as above</p></caption><graphic xlink:href="12859_2019_2612_Fig1_HTML" id="MO1"/></fig></p><p id="Par11">Furthermore this approach with a small modification allows for addressing the possibility of insertion or deletion error. In a Drop-seq style experiment, if a barcode did contain a deletion error (at an unknown position), then nucleotide at the expected last position of the barcode actually arises from the first nucleotide of either an adaptor sequence or a molecular identifier. As such, the circularized barcode sequence will contain a single incorrect nucleotide, resulting in a large number of incorrect k-mers. However, if before circularizing, the sequence is truncated by one nucleotide, then incorrect nucleotide is removed, allowing the circularization to contain a majority of correct k-mers. This provides the same robustness to positional errors, but additionally allows for robustness to deletion errors. A similar operation can be performed to handle the possibility of insertion errors: in this case, the sequence that is circularized is the observed barcode, extended by one nucleotide (into the adaptor / molecular identifier sequence).As every read contains unknown mutation type(s), we perform all three circularization operations before counting k-mers. Thus, we obtain a set of error-free subsequences that derive from the &#x02018;true&#x02019; barcodes. This procedure guarantees that all reads with either zero or one error contribute some error-free k-mers, while reads with two or more errors sometimes contribute error-free k-mers, depending on the spacing between the errors.</p><p id="Par12">We use these k-mer counts to identify and error-correct complete barcodes. To do this we build and traverse a directed, weighted de Bruijn graph [<xref ref-type="bibr" rid="CR2">2</xref>]. In this graph, nodes represent subsequences of length <italic>k - 1</italic>, and an edge represents two nodes that directly adjacent to each other in at least one k-mer. The weight of these edges relates to how many times each edge (k-mer) was observed in the entire dataset. Additionally as the barcode portions of these reads are stranded, these edges are directed by the order of their appearance in the read (5&#x02032; to 3&#x02032;). In this graph, which originates from circularized barcode sequences, a cyclic path of length <italic>l</italic> represents a possible barcode sequence of the same length. We define the capacity of a path to be the weight of the lowest edge within that path. Thus, high-weight paths represent possible barcodes that contain frequently observed k-mers, while low-weight paths likely represent cycles that formed spuriously. This is depicted in Fig. <xref rid="Fig1" ref-type="fig">1</xref>b and c. We emphasize here that we do not need any single read to contain all k-mers in a high-weight path / error-corrected barcode; it is the overlap of many k-mers that likely originate from a number of reads that gives rise to such a path.</p><p id="Par13">To rapidly identify cyclic paths from this graph we use a greedy depth-first recursive search <bold>(Algorithm&#x000a0;1a)</bold>. Briefly, this algorithm works by first (randomly) picking a node from the graph to initialize the search. Each of the outgoing edges that connect to this node is checked, in descending order of the edge weights. This step is repeated for each of the children nodes, for a fixed number of steps given by the length of the barcode (a user-supplied parameter). If at the end of these steps the procedure returns to the same node where it began, a cycle has been found. We use a similar procedure to identify multiple cycles within a graph. After the first cycle has been found we decrement the edge weights of all edges in that cycle by its capacity (the weight of the lowest weight edge in that cycle). This has the effect of removing one edge from the cycle (thereby breaking it) while removing any contribution that cycle had to any other edges. We then repeat the procedure in <bold>Algorithm&#x000a0;1a</bold> until there are no more cycles present in the subgraph. We then repeat this process, starting from a new node, and new nodes are selected from the common k-mers in the dataset. This is described in some more detail in <bold>Algorithms&#x000a0;1a</bold> and <bold>1b.</bold></p><p id="Par14">This approach identifies several cyclic paths from the barcode de Bruijn graph, and the depth of this search is determined by user-supplied parameters. As only a subset of these paths represents a true error-corrected barcode sequence, we filter the paths based on their path weight. We hypothesized that paths representing a true error-corrected barcodes would have a higher capacity than paths that contained errors, or paths formed by spurious k-mer overlap between [barcode-wise] unrelated sequences. To verify this hypothesis we plotted the cumulative distribution of path capacities, and observed a clear inflection point, corresponding to a subset of paths that had a significantly higher capacity than the rest of the population. We computationally identified this inflection point as a local maximum in the first derivative of the cumulative distribution function. This was facilitated by first smoothing the CDF.</p><p id="Par15">Paths are then thresholded at this inflection point, and paths with capacities higher than the threshold value are deemed error-corrected barcodes, while the rest of the paths are rejected. We then assign each read in our dataset to one of the error-corrected barcodes based on either k-mer compatibility or Levenshtein distance. When assigning a read by k-mer compatibility, a read is assigned to the consensus barcode with which it shares the most k-mers. A read is only assigned to a consensus barcode if it shares a minimum number of k-mers with it (a user-specified parameter). With this protocol, we can vary the length of <italic>k</italic> (a user parameter) to affect the output data in a predictable manner. Assigning reads using larger <italic>k</italic> than that used to assign reads enables us to call error-free barcodes with the higher stringency, while assigning a large number of reads <bold>(Algorithm&#x000a0;2)</bold>. In general, in order for this approach to use information contained in reads with one or more errors, we require that <italic>k</italic> be smaller than the length of the barcode. Additionally reads with two or more errors can sometimes contribute error-free k-mers (depending on the relative spacing of these errors in the circularized sequence), and the frequency with which this occurs increases as <italic>k</italic> decreases. However, the number of nodes in the de Bruijn graph is also reduced as <italic>k</italic> decreases leading to an increase in spurious edges between nodes, obfuscating the cyclic paths that represent true barcodes. As such, for a typical drop-seq barcode of length 12 we recommend using a value of <italic>k</italic> that is at least 8 nucleotides in length.</p><p id="Par16">Finally, to improve performance we make a small modification to the protocol outlined above. Rather than building a de Bruijn graph of the entire barcode dataset, we instead build a new subgraph for each new node we initialize the search with. This subgraph is built by first extracting all the reads which contain the start k-mer (in any of its circular permutations), and then building a de Bruijn graph from these reads. As the subgraph was built only from reads that contain the start node, this subgraph only contains nodes that are indirectly connected (within a fixed number of steps) to the start node. This substantially simplifies the search procedure while leaving performance unaffected. To rapidly build these subgraphs we prepare a k-mer index of the input dataset, which maps a k-mer to a list of reads that contains that k-mer. When performing a search from a random start node, we query the k-mer index for the start node and prepare a de Bruijn graph from only the subset of reads returned by the query.</p><p id="Par17">As this index can be quite large (for Drop-seq, which uses 12mer barcodes, each read produces 36 circularized and truncated / extended k-mers to be indexed), which results in an extremely large index. We further simplify this protocol by preparing the index from a subset of the reads. This approximation also does not affect performance, as long as the subset is representative of the entire dataset. We can identify when we have obtained a representative sampling of the data when the k-mer counts distribution has become stable. The exact parameters for this depend on the sequencing depth, number of barcodes, error rate and likely other parameters; however in our tests simply indexing ~&#x02009;0.5&#x02009;m reads is sufficient (Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref>).<table-wrap id="Tab1"><label>Table 1</label><caption><p>Run time for downsampled Macosko et al., datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Number of reads in dataset</th><th>Number of cells detected</th><th>Time</th></tr></thead><tbody><tr><td>1,000,000</td><td>562</td><td>6&#x02009;m 39&#x02009;s</td></tr><tr><td>10,000,000</td><td>575</td><td>51&#x02009;m 08&#x02009;s</td></tr><tr><td>100,000,000</td><td>574</td><td>360&#x02009;m 31&#x02009;s</td></tr></tbody></table></table-wrap></p></sec><sec id="Sec3"><title>Results</title><p id="Par18">To benchmark our algorithms&#x02019; performance and establish it&#x02019;s performance limits, we performed a large number of simulations, under a wide variety of scenarios. We also compared Sircel&#x02019;s performance against a na&#x000ef;ve pipeline based on simple k-mer counting that is not be able to handle insertion / deletion errors. We produced a fixed number of &#x02018;true&#x02019; barcodes, and produced reads by adding a Poisson number of errors to each read. Error positions were selected uniformly at random, and separate datasets were produced for insertion, deletion, mismatch, and all errors. We also varied the barcode abundance distributions between normal, uniform and exponential. For each condition we produced 3 separate datasets and evaluated our algorithms&#x02019; performance on each. Finally, we evaluate the effect of assigning reads to barcodes using either kmer compatability and Levenshtein distance.</p><p id="Par19">As shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1, our algorithm is able to identify the error-free barcode sequences independent of the number of Poisson errors per read. However we do see a dependence on the specific error type: mismatch errors are better tolerated than insertion or deletion errors. Additionally we find that the barcode abundance distribution strongly affects our ability to detect and error correct barcodes as the error rate increases, with normally distributed barcode abundances being far easier to handle than exponentially distributed abundances. We also used our simulations to evaluate how well we could assign reads to error-corrected barcodes (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2). Here we see a similar trend with exponentially distributed barcode abundances causing a higher rate of incorrect read assignment with both the na&#x000ef;ve pipeline and our approach. Importantly however our algorithm outperforms the na&#x000ef;ve approach in these circumstances. In these experiments we observe that using Levenshtein distance to assign reads to consensus barcodes results in a higher rate of correct read assignment. However, these two approaches differ significantly when evaluating the number of unassigned reads for each of the workflows (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3). Together these results show that assigning reads based on Levenshtein distance results in fewer reads being incorrectly assigned, but a higher number of reads being unassigned to any single barcode. This conservative approach to barcode assignment is likely more useful in a real sc-RNA-seq dataset, and as such is the default behavior of the program.</p><p id="Par20">We next validated our approach on real data, by attempting to identify and error-correct barcode sequences in multiple real datasets. We re-analyzed a previously published species-mixing Drop-Seq experiment published by Macosko et al., as well as a similar experiment from the unrelated SeqWell protocol. Although the methods differ, both experiments involved single-cell sequencing of a mixture of human and mouse cells, and as such it served as a useful control for barcode calling: if the calling performs well, cells should only contain human, or mouse reads but not both. We used our algorithm on this data and as expected found a clear inflection point in the cumulative distribution of barcode paths. We could readily identify this inflection by its smoothed first derivative, and thresholding the paths at this inflection point yielded 582 barcodes, each of which had accounted for approximately the same number of reads <bold>(</bold>Fig.&#x000a0;<xref rid="Fig2" ref-type="fig">2</xref>a and b<bold>)</bold>. These values were consistent with previously reported values from the same dataset. We then quantified single-cell expression profiles using combined human/mouse transcriptome, once again using an algorithm derived from k-mer counting [kallisto]. As seen in Fig. <xref rid="Fig2" ref-type="fig">2</xref>c, &#x02018;cells&#x02019; that represent collections of reads clustered by similar barcode k-mers have an fairly even number of reads, as is expected from a single-cell RNA seq experiment. Additionally, these cells exhibit distinct expression profiles, and in nearly every case cells appear to consist of reads deriving entirely from one species (Fig. <xref rid="Fig2" ref-type="fig">2</xref>d and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5). This result indicates that our k-mer counting approach can be used to group reads into single-cell datasets. Finally, we note that deletion errors do pose a real problem in these datasets. To evaluate the extent to which deletion errors in the split-pool bead barcode synthesis protocol affect these datasets we calculated either the Levenshtein distance or the Hamming distance between a consensus barcode and each read that is assigned to it (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). We see that the Hamming distance is systematically higher than the Levenshtein distance indicating that at least some insertion/deletion errors are present in and affect the majority of cells in a Drop-seq experiment.<fig id="Fig2"><label>Fig. 2</label><caption><p>Identifying barcodes and splitting reads from Macosko et al., species mixing experiment. <bold>a</bold> Circular paths were identified in the circular barcode k-mer graph from a published Drop-seq dataset. The distribution of circular path weights versus path rank clearly shows an inflection point. Paths with weight higher than this inflection point are deemed to be true barcodes. <bold>b</bold> This inflection point can be identified as a local maximum in the first derivative of the path-weight distribution. A Savitskiy Golay filter facilitates in this identification by smoothing the data. <bold>c</bold> Reads were grouped into cells by assigning them to to thresholded paths based on k-mer compatibility alone. This assignment results in a flat distribution in the number of pseudoalignments per cell. <bold>d</bold> Reads that were split based on barcode k-mer compatibility alone also segregate by their number of pseudoalignments to different transcriptiomes. This indicates that assigning reads based on k-mer compatibility produces distinct and biologically relevant groupings</p></caption><graphic xlink:href="12859_2019_2612_Fig2_HTML" id="MO2"/></fig></p></sec><sec id="Sec4"><title>Discussion</title><p id="Par21">We have shown how a de Bruijn graph formulation of the barcode calling problem based on circularization of input sequences is a useful approach to identify and error-correct barcode sequences. Our approach simplifies the problem of sequence error correction by rephrasing it as a k-mer counting question, and as such is simple and relatively fast. Furthermore it does not rely heavily on user-supplied parameters or any prior knowledge about the exact nature of the sequencing errors; as such we expect it to be applicable to a number of different single-cell barcoding techniques that differ in the exact nature of the barcode generation chemistry. We also show that our approach produces usable data from real-world datasets, and that our integrated pipeline using kallisto and transcript compatibility counts is an effective approach for rapid and accurate analysis of Drop-Seq single-cell RNA-Seq data.</p><p id="Par22">We benchmarked our algorithm using an extensive set of simulations that systematically varied the error rate per read, the error type, and the abundance of each barcode [single-cell] within the dataset. From these simulations we observe that the barcode abundance distribution makes a significant difference to performance, with normally- and uniformly- distributed barcode abundances being far better tolerated than exponentially distributed barcodes. This behavior is expected; with exponentially distributed barcode abundances, the inflection point in the CDF of cyclic path weights is obscured, making it difficult to distinguish between a true barcode path with low abundance, and an error-containing path with relatively high weight. Notably, exponentially distributed barcode abundances are not expected (and indeed not observed) in real data: the total RNA content from any given single cell in an experiment are typically approximately uniformly distributed.</p><p id="Par23">These simulations also demonstrated that although our method is tolerant of errors when identifying and error-correcting barcode sequences, errors lower its ability to assign individual reads to error-corrected consensus sequences. This is not surprising, because reads with a large number of errors are unlikely to contain any error-free k-mers that are required to assign a read. Simulations also revealed that our algorithm is more tolerant to mismatch errors over insertion or deletion errors. We postulate that this is because in the barcode de Bruijn graph, reads that contain only mismatches form a cyclic path of the correct length, whereas reads containing insertion or deletion errors form paths with incorrect length, complicating the cyclic-path search protocol. This effect is most pronounced at the error rates that are higher than typical Drop-seq datasets.</p></sec><sec id="Sec5"><title>Conclusions</title><p id="Par24">Single-cell genomics is a dynamic field that encompasses a large and growing number of techniques that measure a variety of biological properties. However one commonality in these workflows is that experiments mark reads originating from distinct cells with single cell barcodes. Correctly identifying and grouping reads by their barcodes in the presence of experimental and sequencing errors is an essential first step in any single-cell analysis pipeline. The software presented here addresses this universal problem, and as such it should be useful for a variety of single cell sequencing based genomics experiments. Our approach presented here uses the novel concept of kmer-circularzation, which enables the fast and efficient operation of k-mer counting to be expanded to problems that potentially include insertions and deletions. Although we have not explored this here, we believe this approach might therefore have applications in other areas of genomics; one potential application might be to use k-mer circulariation to obtain k-mer fingerprints of metageomic datasets in an indel sensitive manner.</p><p id="Par25">Finally although we focus here on the specific Drop-seq protocol, there are a number of related single-cell experiments that rely on split-pool combinatorial synthesis of barcodes [<xref ref-type="bibr" rid="CR14">14</xref>], as well as other massively parallel single-cell sequencing experiments that measure other genomic and transcriptomic properties [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR15">15</xref>]. As error correcting and clustering barcodes is central to these assays as well, we believe that these methods will also benefit from our software.</p></sec><sec id="Sec6"><title>Availability and requirements</title><p id="Par26">Project name: Sircel</p><p id="Par27">Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/pachterlab/sircel">https://github.com/pachterlab/sircel</ext-link></p><p id="Par28">Operating system: platform independent</p><p id="Par29">Programming language: python3</p><p id="Par30">Other requirements:</p><p id="Par31">python3 (version 3.5 or higher),</p><p id="Par32">numpy,</p><p id="Par33">scipy,</p><p id="Par34">scikit-learn,</p><p id="Par35">Redis (<ext-link ext-link-type="uri" xlink:href="https://redis.io/">https://redis.io/</ext-link>)</p><p id="Par36">License: MIT</p><p id="Par37">Any restrictions to use by non-academics: no</p></sec><sec id="Sec7"><title>Example</title><p id="Par38">The example data set (supplementary data) shows the workflow to identify and split barcoded reads from a published Drop-seq dataset [SRR1873277]. This dataset derives from a species-mixing experiment, where human and mouse cells were mixed prior to single-cell RNA-seq. As such reads grouped by their barcodes should also segregate by which species they [pseudo] align with. We can therefore evaluate the performance of Sircel by how frequently reads from the two species appear to derive from the same cell.</p></sec><sec id="Sec8"><title>Methods</title><p id="Par39">Raw sequencing data for Drop-seq and Seqwell species mixing was obtained from the sequence read archive (SRR1873277 and SRR5250839 respectively) and converted to fastq format using SRA-toolkit. Subsamples of these datasets were obtained using standard command line tools:<disp-quote><p id="Par40">
<bold>zcat INFILE.fastq.gz | head &#x02013;n NUM_READS*4 | gzip&#x02009;&#x0003e;&#x02009;OUTFILE.fastq.gz</bold>
</p></disp-quote></p><p id="Par41">We used this data without any further processing, or read filtering. Sircel was then used to identify barcodes and assign reads with the following parameters: k-mer length of 7, search breadth of 1000 subgraphs, search depth of 5 paths per subgraph. All results presented here were processed with 32 threads.Output from Sircel was then fed, into a single-cell analysis pipeline based on kallisto (N. L. [<xref ref-type="bibr" rid="CR1">1</xref>]) and transcript compatibility counts [<xref ref-type="bibr" rid="CR11">11</xref>]. Our integrated pipeline, as well as ipython notebooks to visualize the data is available on Github.</p><p id="Par42">Simulations were performed by first randomly generating a 500 ground truth barcode sequences of length 12. Each barcode was assigned a relative abundance drawn from one of three pre-defined distributions (normal, uniform and exponential). Reads were generating by selecting a barcode according to the barcode abundance, and adding a Poisson number of errors given by user-defined rate. Error type (insertion, deletion, mismatch or any) was also varied systematically during this step. Each simulation consisted of 100,000 reads generated in this manner. For each condition (combination of barcode abundance distribution, Poisson error rate and error type), we produced three separate simulations for a total of 180 datasets. The Poisson error rate was varied between 0 and 3 errors per read. The number of cells in each simulation was generated from a normal distribution with mean of 500 and standard deviation of 50. Exponentially distributed cell abundances were generated with scale parameter 0.2, and normally distributed cell abundances were generated with a mean of 200 reads per cell, and standard deviation of 20 reads per cell.</p><p id="Par43">Our na&#x000ef;ve pipeline was based on that of [<xref ref-type="bibr" rid="CR11">11</xref>]. It was implemented in python.</p><p id="Par44">These simulated datasets were then fed into Sircel to identify error-free barcodes. For each simulation we compared the output of Sircel to the ground-truth barcodes, identifying true positives as barcode sequences that were present in both the Sircel output and the ground-truth, false positives as barcode sequences that were found in the Sircel output but not the ground truth, and false negatives as barcode sequences that were not found in the Sircel output but not the ground truth. For each true positive barcode identified by Sircel, we additionally evaluated whether the reads assigned to that barcode were correctly assigned. Reads that derived from the ground truth barcode were deemed correctly assigned, and all other reads were labeled as incorrectly assigned.</p><p id="Par45">Ipython notebooks to reproduce this analysis are available on Github.</p><graphic position="anchor" xlink:href="12859_2019_2612_Figa_HTML" id="MO3"/><graphic position="anchor" xlink:href="12859_2019_2612_Figb_HTML" id="MO4"/></sec><sec sec-type="supplementary-material"><title>Additional file</title><sec id="Sec9"><p>
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="12859_2019_2612_MOESM1_ESM.pdf"><label>Additional file 1:</label><caption><p><bold>Figure S1</bold>. Sircel can robustly identify the number of cells present in a dataset. We performed several simulations with error-prone reads. The number of errors per read, the type of errors, and the distribution of barcode abundances were all systematically varied. Performance was compared over three pipelines: a na&#x000ef;ve approach (grey), using Sircel and k-mers (red) and using Sircel and Levenshtein distance (cyan). A. Any errors. B. Deletions. C. Insertions. D. Mismatches. <bold>Figure S2</bold>. Assigning reads to consensus barcodes depends on errors rate and barcode abundance distribution. Using the same simulations as before, the fraction of reads that were correctly assigned in each cell was quantified. We find that Sircel using Levenshtein distance performs the best. A. Any errors. B. Deletions. C. Insertions. D. Mismatches. <bold>Figure S3</bold>. Assigning reads to consensus barcodes by k-mer compatibility depends on errors rate and barcode abundance distribution. In the same simulations, the fraction of reads that could not be unambigiously assigned in each cell was quantified. A. Any errors. B. Deletions. C. Insertions. D. Mismatches. <bold>Figure S4</bold>. Indel errors are present in real data. We separated barcodes in a species mixing experiment from Seqwell (SRR5250839), and evaluated the Hamming and Levenshtein distances between each read and its consensus barcode. We find that Hamming distance is systematically larger than Levenshtein distance, indicating that the data contains indels. <bold>Figure S5</bold>. Species mixing with Seqwell data. We separated barcodes in a species mixing experiment from Seqwell and evaluated our ability to split reads by species. <bold>Figure S6</bold>. Circularized de Bruijn graph from real data. A de Bruijn subgraph was prepared from circularized reads that could be assigned assigned to 10 randomly selected barcodes from the Macosko et al. dataset is depicted here. Line transparency is proportional to the weight of each edge. (PDF 2486 kb)</p></caption></media></supplementary-material>
</p></sec></sec></body><back><ack><title>Acknowledgements</title><p>We thank Jase Gehring and Vasilis Ntranos for helpful comments and feedback during the development of the method.</p><sec id="FPar1"><title>Funding</title><p id="Par46">None.</p></sec><sec id="FPar2" sec-type="data-availability"><title>Availability of data and materials</title><p id="Par47">The datasets analyzed here were obtained from previously published datasets, which are available at the NCBI Sequence Read Archive. SRA ascension numbers used in this paper are SRR1873277 and SRR5250839.</p></sec></ack><notes notes-type="author-contribution"><title>Authors&#x02019; contributions</title><p>AT and LP conceived of the project. AT wrote the software and analyzed data. AT and LP wrote the manuscript. All authors read and approved the final manuscript.</p></notes><notes notes-type="COI-statement"><sec id="FPar3"><title>Ethics approval</title><p>Not applicable.</p></sec><sec id="FPar4"><title>Consent for publication</title><p>Not applicable.</p></sec><sec id="FPar5"><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec id="FPar6"><title>Publisher&#x02019;s Note</title><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></sec></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bray</surname><given-names>NL</given-names></name><name><surname>Pimentel</surname><given-names>H</given-names></name><name><surname>Melsted</surname><given-names>P</given-names></name><name><surname>Pachter</surname><given-names>L</given-names></name></person-group><article-title>Near-optimal probabilistic RNA-seq quantification</article-title><source>Nat Biotechnol</source><year>2016</year><volume>34</volume><issue>5</issue><fpage>525</fpage><lpage>527</lpage><pub-id pub-id-type="doi">10.1038/nbt.3519</pub-id><pub-id pub-id-type="pmid">27043002</pub-id></element-citation></ref><ref id="CR2"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Compeau</surname><given-names>PEC</given-names></name><name><surname>Pevzner</surname><given-names>PA</given-names></name><name><surname>Tesler</surname><given-names>G</given-names></name></person-group><article-title>How to apply de Bruijn graphs to genome assembly</article-title><source>Nat Biotechnol</source><year>2011</year><volume>29</volume><issue>11</issue><fpage>987</fpage><lpage>991</lpage><pub-id pub-id-type="doi">10.1038/nbt.2023</pub-id><pub-id pub-id-type="pmid">22068540</pub-id></element-citation></ref><ref id="CR3"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fincher</surname><given-names>CT</given-names></name><name><surname>Wurtzel</surname><given-names>O</given-names></name><name><surname>de Hoog</surname><given-names>T</given-names></name><name><surname>Kravarik</surname><given-names>KM</given-names></name><name><surname>Reddien</surname><given-names>PW</given-names></name></person-group><article-title>Cell type transcriptome atlas for the planarian Schmidtea mediterranea</article-title><source>Science</source><year>2018</year><volume>360</volume><issue>6391</issue><fpage>eaaq1736</fpage><lpage>eaaq1714</lpage><pub-id pub-id-type="doi">10.1126/science.aaq1736</pub-id><pub-id pub-id-type="pmid">29674431</pub-id></element-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gierahn</surname><given-names>TM</given-names></name><name><surname>Wadsworth</surname><given-names>MH</given-names></name><name><surname>Hughes</surname><given-names>TK</given-names></name><name><surname>Bryson</surname><given-names>BD</given-names></name><name><surname>Butler</surname><given-names>A</given-names></name><name><surname>Satija</surname><given-names>R</given-names></name><etal/></person-group><article-title>Seq-well: portable, low-cost RNA sequencing of single cells at high throughput</article-title><source>Nat Methods</source><year>2017</year><volume>14</volume><issue>4</issue><fpage>395</fpage><lpage>398</lpage><pub-id pub-id-type="doi">10.1038/nmeth.4179</pub-id><pub-id pub-id-type="pmid">28192419</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><mixed-citation publication-type="other">Hunt M. Circlator: automated circularization of genome assemblies using long sequencing reads. Genome Biol. 2015:1&#x02013;10 10.1186/s13059-015-0849-0.</mixed-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Karaiskos</surname><given-names>N</given-names></name><name><surname>Wahle</surname><given-names>P</given-names></name><name><surname>Alles</surname><given-names>J</given-names></name><name><surname>Boltengagen</surname><given-names>A</given-names></name><name><surname>Ayoub</surname><given-names>S</given-names></name><name><surname>Kipar</surname><given-names>C</given-names></name><etal/></person-group><article-title>The Drosophila embryo at single-cell transcriptome resolution</article-title><source>Science</source><year>2017</year><volume>358</volume><issue>6360</issue><fpage>194</fpage><lpage>199</lpage><pub-id pub-id-type="doi">10.1126/science.aan3235</pub-id><pub-id pub-id-type="pmid">28860209</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Klein</surname><given-names>AM</given-names></name><name><surname>Mazutis</surname><given-names>L</given-names></name><name><surname>Akartuna</surname><given-names>I</given-names></name><name><surname>Tallapragada</surname><given-names>N</given-names></name><name><surname>Veres</surname><given-names>A</given-names></name><name><surname>Li</surname><given-names>V</given-names></name><etal/></person-group><article-title>Droplet barcoding for single-cell transcriptomics applied to embryonic stem cells</article-title><source>Cell</source><year>2015</year><volume>161</volume><issue>5</issue><fpage>1187</fpage><lpage>1201</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.04.044</pub-id><pub-id pub-id-type="pmid">26000487</pub-id></element-citation></ref><ref id="CR8"><label>8.</label><mixed-citation publication-type="other">Li H. BFC: correcting Illumina sequencing errors. Bioinformatics. 2015:1&#x02013;3 10.1093/bioinformatics/btv290/-/DC1.</mixed-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>Y</given-names></name><name><surname>Schroder</surname><given-names>J</given-names></name><name><surname>Schmidt</surname><given-names>B</given-names></name></person-group><article-title>Musket: a multistage k-mer spectrum-based error corrector for Illumina sequence data</article-title><source>Bioinformatics</source><year>2013</year><volume>29</volume><issue>3</issue><fpage>308</fpage><lpage>315</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bts690</pub-id><pub-id pub-id-type="pmid">23202746</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Macosko</surname><given-names>EZ</given-names></name><name><surname>Basu</surname><given-names>A</given-names></name><name><surname>Satija</surname><given-names>R</given-names></name><name><surname>Nemesh</surname><given-names>J</given-names></name><name><surname>Shekhar</surname><given-names>K</given-names></name><name><surname>Goldman</surname><given-names>M</given-names></name><etal/></person-group><article-title>Highly parallel genome-wide expression profiling of individual cells using Nanoliter droplets</article-title><source>Cell</source><year>2015</year><volume>161</volume><issue>5</issue><fpage>1202</fpage><lpage>1214</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.05.002</pub-id><pub-id pub-id-type="pmid">26000488</pub-id></element-citation></ref><ref id="CR11"><label>11.</label><mixed-citation publication-type="other">Ntranos V, Kamath G, Zhang JM, Pachter L, Tse DN. Fast and accurate single-cell RNA-seq analysis by clustering of transcript-compatibility counts. Genome Biol. 2016:1&#x02013;14 10.1186/s13059-016-0970-8.</mixed-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Patro</surname><given-names>R</given-names></name><name><surname>Mount</surname><given-names>SM</given-names></name><name><surname>Kingsford</surname><given-names>C</given-names></name></person-group><article-title>Sailfish enables alignment-free isoform quantification from RNA-seq reads using lightweight algorithms</article-title><source>Nat Biotechnol</source><year>2014</year><volume>32</volume><issue>5</issue><fpage>462</fpage><lpage>464</lpage><pub-id pub-id-type="doi">10.1038/nbt.2862</pub-id><pub-id pub-id-type="pmid">24752080</pub-id></element-citation></ref><ref id="CR13"><label>13.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Plass</surname><given-names>M</given-names></name><name><surname>Solana</surname><given-names>J</given-names></name><name><surname>Wolf</surname><given-names>FA</given-names></name><name><surname>Ayoub</surname><given-names>S</given-names></name><name><surname>Misios</surname><given-names>A</given-names></name><name><surname>Gla&#x0017e;ar</surname><given-names>P</given-names></name><etal/></person-group><article-title>Cell type atlas and lineage tree of a whole complex animal by single-cell transcriptomics</article-title><source>Science</source><year>2018</year><volume>360</volume><issue>6391</issue><fpage>eaaq1723</fpage><lpage>eaaq1712</lpage><pub-id pub-id-type="doi">10.1126/science.aaq1723</pub-id><pub-id pub-id-type="pmid">29674432</pub-id></element-citation></ref><ref id="CR14"><label>14.</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Rosenberg</surname><given-names>AB</given-names></name><name><surname>Roco</surname><given-names>C</given-names></name><name><surname>Muscat</surname><given-names>RA</given-names></name><name><surname>Kuchina</surname><given-names>A</given-names></name><name><surname>Mukherjee</surname><given-names>S</given-names></name><name><surname>Chen</surname><given-names>W</given-names></name><etal/></person-group><source>Scaling single cell transcriptomics through split pool barcoding</source><year>2017</year><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="CR15"><label>15.</label><mixed-citation publication-type="other">Rotem A, Ram O, Shoresh N, Sperling RA, Goren A, Weitz DA, Bernstein BE. Single-cell ChIP-seq reveals cell subpopulations defined by chromatin state. Nat Biotechnol. 2015:1&#x02013;11 10.1038/nbt.3383.</mixed-citation></ref><ref id="CR16"><label>16.</label><mixed-citation publication-type="other">Saunders A, Macosko E, Wysoker A, Goldman M, Krienen F, de Rivera H, et al. A single-cell atlas of cell types, states, and other transcriptional patterns from nine regions of the adult mouse. Brain. 2018:1&#x02013;27 10.1101/299081.</mixed-citation></ref><ref id="CR17"><label>17.</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Schaeffer</surname><given-names>L</given-names></name><name><surname>Pimentel</surname><given-names>H</given-names></name><name><surname>Bray</surname><given-names>N</given-names></name><name><surname>Mellsted</surname><given-names>P</given-names></name><name><surname>Pachter</surname><given-names>L</given-names></name></person-group><source>Pseudoalignment for metagenomic read assignment</source><year>2015</year><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="CR18"><label>18.</label><mixed-citation publication-type="other">Skums P, Dimitrova Z, Campo DS, Vaughan G, Rossi L, Forbi JC, et al. Efficient error correction for next-generation sequencing of viral amplicons. BMC Bioinformatics. 2012:1&#x02013;13 10.1186/1471-2105-13-S10-S6.</mixed-citation></ref><ref id="CR19"><label>19.</label><mixed-citation publication-type="other">Stephenson W, Donlin LT, Butler A, Rozo C, Bracken B, Rashidfarrokhi A, et al. Single-cell RNA-seq of rheumatoid arthritis synovial tissue using low-cost microfluidic instrumentation. Nat Commun. 2018:1&#x02013;10 10.1038/s41467-017-02659-x.</mixed-citation></ref><ref id="CR20"><label>20.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Svensson</surname><given-names>V</given-names></name><name><surname>Natarajan</surname><given-names>KN</given-names></name><name><surname>Ly</surname><given-names>L-H</given-names></name><name><surname>Miragaia</surname><given-names>RJ</given-names></name><name><surname>Labalette</surname><given-names>C</given-names></name><name><surname>Macaulay</surname><given-names>IC</given-names></name><etal/></person-group><article-title>Power analysis of single-cell RNA-sequencing experiments</article-title><source>Nat Methods</source><year>2017</year><volume>14</volume><issue>4</issue><fpage>381</fpage><lpage>387</lpage><pub-id pub-id-type="doi">10.1038/nmeth.4220</pub-id><pub-id pub-id-type="pmid">28263961</pub-id></element-citation></ref><ref id="CR21"><label>21.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tosches</surname><given-names>MA</given-names></name><name><surname>Yamawaki</surname><given-names>TM</given-names></name><name><surname>Naumann</surname><given-names>RK</given-names></name><name><surname>Jacobi</surname><given-names>AA</given-names></name><name><surname>Tushev</surname><given-names>G</given-names></name><name><surname>Laurent</surname><given-names>G</given-names></name></person-group><article-title>Evolution of pallium, hippocampus, and cortical cell types revealed by single-cell transcriptomics in reptiles</article-title><source>Science</source><year>2018</year><volume>360</volume><issue>6391</issue><fpage>881</fpage><lpage>888</lpage><pub-id pub-id-type="doi">10.1126/science.aar4237</pub-id><pub-id pub-id-type="pmid">29724907</pub-id></element-citation></ref><ref id="CR22"><label>22.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Trapnell</surname><given-names>C</given-names></name></person-group><article-title>Defining cell types and states with single-cell genomics</article-title><source>Genome Res</source><year>2015</year><volume>25</volume><issue>10</issue><fpage>1491</fpage><lpage>1498</lpage><pub-id pub-id-type="doi">10.1101/gr.190595.115</pub-id><pub-id pub-id-type="pmid">26430159</pub-id></element-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>Z</given-names></name><name><surname>Wang</surname><given-names>W</given-names></name></person-group><article-title>RNA-skim: a rapid method for RNA-Seq quantification at transcript level</article-title><source>Bioinformatics</source><year>2014</year><volume>30</volume><issue>12</issue><fpage>i283</fpage><lpage>i292</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btu288</pub-id><pub-id pub-id-type="pmid">24931995</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zorita</surname><given-names>E</given-names></name><name><surname>Cusc&#x000f3;</surname><given-names>P</given-names></name><name><surname>Filion</surname><given-names>GJ</given-names></name></person-group><article-title>Starcode: sequence clustering based on all-pairs search</article-title><source>Bioinformatics</source><year>2015</year><volume>31</volume><issue>12</issue><fpage>1913</fpage><lpage>1919</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btv053</pub-id><pub-id pub-id-type="pmid">25638815</pub-id></element-citation></ref></ref-list></back></article>