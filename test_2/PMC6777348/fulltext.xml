<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.2 20190208//EN" "JATS-archivearticle1-mathml3.dtd"> 
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="letter"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">Nat Biotechnol</journal-id><journal-id journal-id-type="iso-abbrev">Nat. Biotechnol</journal-id><journal-title-group><journal-title>Nature Biotechnology</journal-title></journal-title-group><issn pub-type="ppub">1087-0156</issn><issn pub-type="epub">1546-1696</issn><publisher><publisher-name>Nature Publishing Group US</publisher-name><publisher-loc>New York</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">6777348</article-id><article-id pub-id-type="pmid">31138913</article-id><article-id pub-id-type="publisher-id">140</article-id><article-id pub-id-type="doi">10.1038/s41587-019-0140-0</article-id><article-categories><subj-group subj-group-type="heading"><subject>Correspondence</subject></subj-group></article-categories><title-group><article-title>The Kipoi repository accelerates community exchange and reuse of predictive models for genomics</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" equal-contrib="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-7790-8936</contrib-id><name><surname>Avsec</surname><given-names>&#x0017d;iga</given-names></name><address><email>avsec@in.tum.de</email></address><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Kreuzhuber</surname><given-names>Roman</given-names></name><xref ref-type="aff" rid="Aff3">3</xref><xref ref-type="aff" rid="Aff4">4</xref></contrib><contrib contrib-type="author"><name><surname>Israeli</surname><given-names>Johnny</given-names></name><xref ref-type="aff" rid="Aff5">5</xref></contrib><contrib contrib-type="author"><name><surname>Xu</surname><given-names>Nancy</given-names></name><xref ref-type="aff" rid="Aff6">6</xref></contrib><contrib contrib-type="author"><name><surname>Cheng</surname><given-names>Jun</given-names></name><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Shrikumar</surname><given-names>Avanti</given-names></name><xref ref-type="aff" rid="Aff6">6</xref></contrib><contrib contrib-type="author"><name><surname>Banerjee</surname><given-names>Abhimanyu</given-names></name><xref ref-type="aff" rid="Aff7">7</xref></contrib><contrib contrib-type="author"><name><surname>Kim</surname><given-names>Daniel S.</given-names></name><xref ref-type="aff" rid="Aff8">8</xref></contrib><contrib contrib-type="author"><name><surname>Beier</surname><given-names>Thorsten</given-names></name><xref ref-type="aff" rid="Aff9">9</xref><xref ref-type="aff" rid="Aff10">10</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-5445-9314</contrib-id><name><surname>Urban</surname><given-names>Lara</given-names></name><xref ref-type="aff" rid="Aff4">4</xref><xref ref-type="aff" rid="Aff10">10</xref></contrib><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3084-2287</contrib-id><name><surname>Kundaje</surname><given-names>Anshul</given-names></name><address><email>akundaje@stanford.edu</email></address><xref ref-type="aff" rid="Aff6">6</xref><xref ref-type="aff" rid="Aff11">11</xref></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Stegle</surname><given-names>Oliver</given-names></name><address><email>oliver.stegle@embl.de</email></address><xref ref-type="aff" rid="Aff4">4</xref><xref ref-type="aff" rid="Aff9">9</xref><xref ref-type="aff" rid="Aff10">10</xref></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Gagneur</surname><given-names>Julien</given-names></name><address><email>gagneur@in.tum.de</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000000123222966</institution-id><institution-id institution-id-type="GRID">grid.6936.a</institution-id><institution>Department of Informatics, </institution><institution>Technical University of Munich, </institution></institution-wrap>Garching, Germany </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 973X</institution-id><institution-id institution-id-type="GRID">grid.5252.0</institution-id><institution>Graduate School of Quantitative Biosciences (QBM), </institution><institution>Ludwig&#x02010;Maximilians&#x02010;Universit&#x000e4;t M&#x000fc;nchen, </institution></institution-wrap>Munich, Germany </aff><aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000000121885934</institution-id><institution-id institution-id-type="GRID">grid.5335.0</institution-id><institution>Department of Haematology, </institution><institution>University of Cambridge, </institution></institution-wrap>Cambridge, UK </aff><aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0000 9709 7726</institution-id><institution-id institution-id-type="GRID">grid.225360.0</institution-id><institution>European Molecular Biology Laboratory, </institution><institution>European Bioinformatics Institute, </institution></institution-wrap>Hinxton, UK </aff><aff id="Aff5"><label>5</label><institution-wrap><institution-id institution-id-type="ISNI">0000000419368956</institution-id><institution-id institution-id-type="GRID">grid.168010.e</institution-id><institution>Biophysics Program, </institution><institution>Stanford University, </institution></institution-wrap>Stanford, CA USA </aff><aff id="Aff6"><label>6</label><institution-wrap><institution-id institution-id-type="ISNI">0000000419368956</institution-id><institution-id institution-id-type="GRID">grid.168010.e</institution-id><institution>Department of Computer Science, </institution><institution>Stanford University, </institution></institution-wrap>Stanford, CA USA </aff><aff id="Aff7"><label>7</label><institution-wrap><institution-id institution-id-type="ISNI">0000000419368956</institution-id><institution-id institution-id-type="GRID">grid.168010.e</institution-id><institution>Physics Department, </institution><institution>Stanford University, </institution></institution-wrap>Stanford, CA USA </aff><aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="ISNI">0000000419368956</institution-id><institution-id institution-id-type="GRID">grid.168010.e</institution-id><institution>Biomedical Informatics Program, </institution><institution>Stanford University, </institution></institution-wrap>Stanford, CA USA </aff><aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0492 0584</institution-id><institution-id institution-id-type="GRID">grid.7497.d</institution-id><institution>Division for Computational Genomics &#x00026; Systems Genetics, </institution><institution>German Cancer Research Center, </institution></institution-wrap>Heidelberg, Germany </aff><aff id="Aff10"><label>10</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0495 846X</institution-id><institution-id institution-id-type="GRID">grid.4709.a</institution-id><institution>European Molecular Biology Laboratory, </institution><institution>Genome Biology Unit, </institution></institution-wrap>Heidelberg, Germany </aff><aff id="Aff11"><label>11</label><institution-wrap><institution-id institution-id-type="ISNI">0000000419368956</institution-id><institution-id institution-id-type="GRID">grid.168010.e</institution-id><institution>Department of Genetics, </institution><institution>Stanford University, </institution></institution-wrap>Stanford, CA USA </aff></contrib-group><pub-date pub-type="epub"><day>28</day><month>5</month><year>2019</year></pub-date><pub-date pub-type="pmc-release"><day>28</day><month>5</month><year>2019</year></pub-date><pub-date pub-type="ppub"><year>2019</year></pub-date><volume>37</volume><issue>6</issue><fpage>592</fpage><lpage>600</lpage><permissions><copyright-statement>&#x000a9; The Author(s) 2019</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article&#x02019;s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article&#x02019;s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><kwd-group kwd-group-type="npg-subject"><title>Subject terms</title><kwd>Computational biology and bioinformatics</kwd><kwd>Genome informatics</kwd><kwd>Machine learning</kwd></kwd-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/501100001659</institution-id><institution>Deutsche Forschungsgemeinschaft (German Research Foundation)</institution></institution-wrap></funding-source></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/100011098</institution-id><institution>SU | Stanford Bio-X</institution></institution-wrap></funding-source></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/100000011</institution-id><institution>Howard Hughes Medical Institute (HHMI)</institution></institution-wrap></funding-source></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/100013060</institution-id><institution>European Molecular Biology Laboratory (EMBL Heidelberg)</institution></institution-wrap></funding-source><award-id>N635290</award-id><principal-award-recipient><name><surname>Urban</surname><given-names>Lara</given-names></name></principal-award-recipient></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/100010661</institution-id><institution>EC | Horizon 2020 Framework Programme (EU Framework Programme for Research and Innovation H2020)</institution></institution-wrap></funding-source><award-id>N635290</award-id><principal-award-recipient><name><surname>Urban</surname><given-names>Lara</given-names></name></principal-award-recipient></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">https://doi.org/10.13039/100000002</institution-id><institution>U.S. Department of Health &#x00026; Human Services | National Institutes of Health (NIH)</institution></institution-wrap></funding-source><award-id>1DP2OD022870</award-id><award-id>1U01HG009431</award-id><principal-award-recipient><name><surname>Kundaje</surname><given-names>Anshul</given-names></name></principal-award-recipient></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s), under exclusive licence to Springer Nature Limited 2019</meta-value></custom-meta></custom-meta-group></article-meta></front><body><p id="Par1"><bold>To the Editor</bold> &#x02014; Advances in machine learning, coupled with rapidly growing genome sequencing and molecular profiling datasets, are catalyzing progress in genomics<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. In particular, predictive machine learning models, which are mathematical functions trained to map input data to output values, have found widespread usage. Prominent examples include calling variants from whole-genome sequencing data<sup><xref ref-type="bibr" rid="CR2">2</xref>,<xref ref-type="bibr" rid="CR3">3</xref></sup>, estimating CRISPR guide activity<sup><xref ref-type="bibr" rid="CR4">4</xref>,<xref ref-type="bibr" rid="CR5">5</xref></sup> and predicting molecular phenotypes, including transcription factor binding, chromatin accessibility and splicing efficiency, from DNA sequence<sup><xref ref-type="bibr" rid="CR1">1</xref>,<xref ref-type="bibr" rid="CR6">6</xref>&#x02013;<xref ref-type="bibr" rid="CR11">11</xref></sup>. Once trained, these models can be probed in silico to infer quantitative relationships between diverse genomic data modalities, enabling several key applications such as the interpretation of functional genetic variants and rational design of synthetic genes.</p><p id="Par2">However, despite the pivotal importance of predictive models in genomics, it is surprisingly difficult to share and exchange models effectively. In particular, there is no established standard for depositing and sharing trained models. This lack is in stark contrast to bioinformatics software and workflows, which are commonly shared through general-purpose software platforms such as the highly successful Bioconductor project<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>. Similarly, there exist platforms to share genomic raw data, including Gene Expression Omnibus (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/">https://www.ncbi.nlm.nih.gov/geo/</ext-link>), ArrayExpress (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/arrayexpress">https://www.ebi.ac.uk/arrayexpress</ext-link>) and the European Nucleotide Archive (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/ena">https://www.ebi.ac.uk/ena</ext-link>). In contrast, trained genomics models are made available via scattered channels, including code repositories, <xref rid="MOESM1" ref-type="media">supplementary material</xref> of articles and author-maintained web pages. The lack of a standardized framework for sharing trained models in genomics hampers not only the effective use of these models&#x02014;and in particular their application to new data&#x02014;but also the use of existing models as building blocks to solve more complex tasks.</p><p id="Par3">Repositories of trained models (Supplementary Table <xref rid="MOESM1" ref-type="media">1</xref>), which are routinely used for benchmarking and as a starting point to rapidly develop new models in computer vision and natural language processing, hold the promise to overcome these challenges. However, although generic model repositories exist, these are geared toward a technical audience of machine-learning experts. In contrast, a repository of trained models for genomics needs to be easy to use and deliver robust and well-documented software to enable application by practitioners who do not have expert knowledge in machine learning. A second challenge is the heterogeneity of machine-learning frameworks that are used, including Keras (<ext-link ext-link-type="uri" xlink:href="https://keras.io">https://keras.io</ext-link>), Tensorflow (<ext-link ext-link-type="uri" xlink:href="https://tensorflow.org">https://tensorflow.org</ext-link>), PyTorch (<ext-link ext-link-type="uri" xlink:href="https://pytorch.org">https://pytorch.org</ext-link>) and custom model code, which is not addressed by current repositories. Furthermore, a model repository for genomics requires additional developments to support data formats and necessary processing steps for data produced by different genomics technologies. Finally, applications in genomics impose specific requirements on the interpretability of models, for example, to understand changes in phenotype for different DNA sequence inputs.</p><p id="Par4">Here, we present Kipoi (Greek for &#x02018;gardens&#x02019;, pronounced &#x02018;k&#x000ed;pi&#x02019;), an open science initiative to foster sharing and reuse of trained models in genomics. Already, the Kipoi repository (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, middle) offers more than 2,000 individual trained models from 22 distinct studies that cover key predictive tasks in genomics, including the prediction of chromatin accessibility, transcription factor binding, and alternative splicing from DNA sequence. Kipoi is accessible via GitHub and as web resource (<ext-link ext-link-type="uri" xlink:href="https://kipoi.org">https://kipoi.org</ext-link>), providing a browsable interface to explore and search models for specific tasks.<fig id="Fig1"><label>Fig. 1</label><caption><title>Overview of Kipoi.</title><p>From left to right: at its core, Kipoi defines a programmatic standard for data-loaders and predictive models. Data-loaders translate genomics data into numeric representations that can be used by machine learning models. Kipoi models can be implemented using a broad range of machine-learning frameworks. The Kipoi repository allows users to store and retrieve trained models, together with associated data-loaders. Kipoi models are automatically versioned, nightly tested and systematically documented with examples of their use. Kipoi models can be accessed through unified interfaces from python, R and the command line. All models and their software dependencies can be installed in a fully automatic manner. Kipoi streamlines the application of trained models to make predictions on new data, to score variants stored in the standard variant call format (.vcf) file format, and to assess the effect of variation in the input to model predictions (feature importance score). Moreover, Kipoi models can be adapted to new tasks either by retraining them or by building new composite models that combine existing ones. Newly defined models can be deposited in the repository.</p></caption><graphic xlink:href="41587_2019_140_Fig1_HTML" id="d29e540"/></fig></p><p id="Par5">One of the core innovations of Kipoi includes standardized data handling (data-loaders) (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, left). Data-loaders abstract and unify the preprocessing of data stored in bioinformatics file formats, yielding numerical representations that can be used as model inputs. Kipoi defines an application programming interface (API; Fig. <xref rid="Fig1" ref-type="fig">1</xref>, right; i.e., a standard way for software components to communicate with Kipoi models), which allows programmers to interchangeably use Kipoi models in their software with minimal coding effort. The Kipoi API is accessible from python and R, two of the most popular programing languages in computational biology. The API can also be accessed via the command line, which facilitates the integration of Kipoi models into bioinformatics workflows.</p><p id="Par6">To ensure sustainability of trained models and to facilitate their dissemination, Kipoi builds on and interoperates with a range of software development technologies and standards. The model descriptions and the code of Kipoi are stored in GitHub repositories, providing issue tracking to facilitate transparent and rapid user&#x02013;developer iterations. Moreover, by building on GitHub, we track and index both the Kipoi core code and contributed models, which facilitates reproducible research. The Kipoi model definition describes the model inputs and outputs, specifies the data-loader and required dependencies, and provides information about the source publication or the distribution license. Kipoiseq (<ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/kipoiseq/">https://github.com/kipoi/kipoiseq/</ext-link>), a companion python package, provides ready-to-use data-loaders for canonical sequence-related bioinformatics data types. Model parameters or other non-source files are hosted on Zenodo or Figshare&#x02014;data repositories that offer a digital object identifier (DOI) and ensure long-term data access. Kipoi enables seamless installation of models and their software dependencies independently of the programming language of the model (by providing containers or using Conda and pip package managers, hence leveraging the Bioconda distribution<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>; <xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>). New models can be contributed using a simple, well-documented workflow (<xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>). Moreover, all models are subjected to nightly tests using a continuous integration service (CircleCI), thereby ensuring that all models are executable and yield reproducible outputs on test datasets<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>. Below, we illustrate usage of Kipoi through five relevant use cases and make the code available for each of them.</p><sec id="Sec1"><title>Benchmarking alternative models for predicting transcription factor binding</title><p id="Par7">Practitioners are often faced with the choice between multiple predictive models. Identifying the most appropriate model often requires them to perform a benchmark on data relevant to the application. Access to a wide range of models through a common API facilitates the systematic comparison of models. To illustrate this use case, we benchmarked five models for predicting genomic binding sites of transcription factors (Fig. <xref rid="Fig2" ref-type="fig">2a</xref>). These models span different modeling paradigms, including methods based on classical position weight matrices, gapped <italic>k</italic>-mer support vector machines (lsgkm-SVM<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>) and deep learning (DeepBind<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, DeepSEA<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> and FactorNet<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>). The models were assessed for distinguishing bound from unbound regions, where bound regions were defined as high-confidence binding events in chromatin immunoprecipitation sequencing (ChIP-seq) experiments for four transcription factors in different cell lines: CEBPB in HeLa-S3, JUND in HepG2, MAFK in K562 and NANOG in H1-hESC (<xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>). With the exception of lsgkm-SVM (Supplementary Table <xref rid="MOESM1" ref-type="media">1</xref>), all Kipoi implementations of the considered models are based on implementations provided by the respective publications and were trained by the original authors. The performance of all models was assessed on chromosome 8, which was not used to train any of the considered models.<fig id="Fig2"><label>Fig. 2</label><caption><title>Using Kipoi to apply and benchmark alternative models for transcription factor binding prediction.</title><p><bold>a</bold>, Five models for predicting transcription factor binding based on alternative modeling paradigms: first, position weight matrices provided by the HOCOMOCO database<sup><xref ref-type="bibr" rid="CR28">28</xref></sup>; second, lsgkm-SVM<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>, a support vector machine classifier; third, the convolutional neural network DeepBind<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>; fourth, the multi-task convolutional neural network DeepSEA; and finally, FactorNet, a multimodal deep neural network with convolutional and recurrent layers that further integrates chromatin accessibility profile and genomic annotation features. Models differ by both the size of genomic input sequence (DeepSEA<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> and FactorNET<sup><xref ref-type="bibr" rid="CR8">8</xref></sup> consider ~1 kb, whereas other models are based on ~100 bp sequence inputs) and the parametrization complexity, with the total size of stored model parameters ranging from 16 kB (pwm_HOCOMOCO) to 211 MB (DeepSEA). <bold>b</bold>, Performance of the models in <bold>a</bold> for predicting ChIP-seq peaks of four transcription factors on held-out data (chromosome 8), quantified using the area under the precision recall curve (auPRC). More complex models yield more accurate predictions than the simpler models such as the commonly used position weight matrices. <bold>c</bold>, Example use of Kipoi from the command line to install software dependencies, download the model, extract and preprocess the data, and write predictions to a new file. Results as shown in <bold>b</bold> can be obtained for all Kipoi models listed in <bold>a</bold> using these generic commands by varying the placeholder &#x0003c;Model&#x0003e;.</p></caption><graphic xlink:href="41587_2019_140_Fig2_HTML" id="d29e652"/></fig></p><p id="Par8">Position weight matrix models performed poorly across all transcription factors (Fig. <xref rid="Fig2" ref-type="fig">2b</xref>), likely owing to their inability to account for additional sequence features, such as motifs of other cooperating and competing transcription factors. More complex models (for example, DeepSEA and FactorNet) consistently outperformed simpler ones (for example, DeepBind and lsgkm-SVM). FactorNet consistently yielded the most accurate predictions, most likely because the model combines sequence and DNA accessibility information (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref>).</p><p id="Par9">In this example, Kipoi greatly simplifies an otherwise cumbersome task. The considered models are implemented with different software frameworks (Fig. <xref rid="Fig2" ref-type="fig">2a</xref>), require different input file formats, and return predictions in different output formats. Furthermore, installing and validating the appropriate software dependencies for each model is difficult and time consuming when done manually. With Kipoi, the entire procedure of installing and executing a model reduces to executing three simple commands (Fig. <xref rid="Fig2" ref-type="fig">2c</xref>). As these three commands are common to all models and the predictions are stored in a common format, the benchmark can be very simply scripted with workflow management tools (<xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>).</p></sec><sec id="Sec2"><title>Improving predictive models of chromatin accessibility via transfer learning</title><p id="Par10">Training new models can be time consuming and requires large training datasets. One way this can be facilitated is via transfer learning (i.e., reusing models trained on one prediction task to initialize a new model for a different but related task)<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>. Transfer learning typically enables more rapid training, reduces the required amount of data for training and improves the predictive performance compared with models trained from scratch. Deep neural networks are well suited to transfer learning. They consist of successive layers that transform input data into increasingly abstract representations. Most of the low-level abstractions&#x02014;for instance, edge detection for images or transcription factor motifs in genomics&#x02014;turn out to be common to multiple prediction tasks. Consequently, it is often sufficient to train only the more abstract layers when transferring such models to solve a new task. Transfer learning of deep neural networks has been successfully applied across multiple domains, including biological imaging<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, natural language processing<sup><xref ref-type="bibr" rid="CR18">18</xref></sup> and genomics<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>.</p><p id="Par11">Here we revisit a transfer learning example in genomics<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>, predicting chromatin accessibility profiles for 431 biosamples (cell lines or tissues; <xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>). Initially, we trained a genome-wide multi-task model to predict chromatin accessibility for 421 biosamples (tasks), while holding out 10 biosamples. For the 10 held-out biosamples, we trained single-task models, one per biosample, transferring all model parameters but the final layer (Fig. <xref rid="Fig3" ref-type="fig">3a</xref>). The final two layers of this model were then retrained for each task while keeping the remaining model parameters fixed. For comparison, we also considered single-task models with randomly initialized parameters but otherwise identical architecture. Models initialized with transferred model parameters yielded improved predictive accuracy for all biosamples, with a 15.1% larger area under the precision recall curve on average, compared to conventional training using randomly initialized parameters (Fig. <xref rid="Fig3" ref-type="fig">3b</xref>). Transfer learning also greatly reduced the required training time, from over a day to 7 h on average (5.4 epochs versus 17.3 epochs on average; Fig. <xref rid="Fig3" ref-type="fig">3c</xref>).<fig id="Fig3"><label>Fig. 3</label><caption><title>Using Kipoi for adapting existing models to new tasks (transfer learning).</title><p><bold>a</bold>, Architecture of alternative models for predicting chromatin accessibility from DNA sequence. Model parameters were either randomly initialized (left) or transferred from an existing neural network pretrained on 421 other biosamples (cell lines or tissues, right). <bold>b</bold>, Predictive performance measured using the area under the precision recall curve (auPRC), comparing randomly initialized (light blue) versus pretrained (dark blue) models. Shown is the performance on held-out data (chromosomes 1, 8 and 21) for 10 biosamples that were not used during pretraining. <bold>c</bold>, Training curves, showing the auPRC on the validation data (chromosome 9) as a function of the training epoch. The dashed vertical line denotes the training epoch at which the model training was completed. Pretrained models required fewer training epochs than randomly initialized models and achieved more accurate predictions.</p></caption><graphic xlink:href="41587_2019_140_Fig3_HTML" id="d29e733"/></fig></p><p id="Par12">Kipoi promotes transfer learning in three ways. First, it provides access to a comprehensive collection of state-of-the-art models in genomics. Transfer learning works better if the tackled task is similar to the original task of the pretrained model<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>. Kipoi allows users to efficiently access a large collection of trained models, which can be browsed by name, tag or framework, thus facilitating the identification of models trained for related tasks. Second, each model is easily installable and comes with a tested data-loader. Most of the data-loaders can be directly used to retrain models. Third, for neural network models, Kipoi offers a command to return and store the activation of a desired intermediate layer rather than the final, prediction layer. Using these precomputed intermediate activations can substantially speed the training of the transferred model. A second advantage of storing the intermediate activation is that any framework can be used to train the top layers. Altogether, leveraging pretrained models&#x02014;in particular, deep neural networks that have been trained on large datasets with a substantial investment in computing time&#x02014;allows researchers to train more accurate models on smaller datasets while saving time and computing costs.</p></sec><sec id="Sec3"><title>Predicting the molecular effects of genetic variants using interpretation plugins</title><p id="Par13">One important application of trained models in genomics, with translational relevance in human genetics and cancer research, is to predict the effects of genetic variants on molecular phenotypes<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR20">20</xref></sup>. Individually, variant effect prediction has been implemented by a subset of published sequence-based predictive models, such as DeepBind<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, DeepSEA<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> and CpGenie<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. Kipoi provides a generic and standardized implementation of variant effect prediction as a plugin, which allows for annotating variants obtained from the variant call format (.vcf) files in conjunction with DNA sequence-based models (98% of models in the Kipoi repository). The variant effect prediction plugin performs in silico mutagenesis by contrasting model predictions for the reference allele and for the alternative allele (Fig. <xref rid="Fig4" ref-type="fig">4a,b</xref>). If the model can be applied across the entire genome, such as in chromatin accessibility models, sequences centered on the queried variants are extracted (top row, Fig. <xref rid="Fig4" ref-type="fig">4b</xref>). If instead the model can only be applied to regions anchored at specific genomic locations, such as in splicing models at intron&#x02013;exon junctions, only sequences extracted from valid regions that overlap with the variants of interest are used (bottom row, Fig. <xref rid="Fig4" ref-type="fig">4b</xref>). Kipoi provides a single command handling both scenarios (Fig. <xref rid="Fig4" ref-type="fig">4c</xref>). Altogether, the variant effect prediction plugin allows integrating a broad range of genomics predictive models into personal genome annotation workflows, and it can be readily extended to newly added models.<fig id="Fig4"><label>Fig. 4</label><caption><title>Variant effect prediction and feature importance scores.</title><p><bold>a</bold>, Schema of variant effect prediction using in silico mutagenesis. Model predictions calculated for the reference allele and the alternative allele are contrasted and written into an annotated copy of the input variant call format file (.vcf). <bold>b</bold>, Kipoi uniformly supports variant effect prediction for models that can make predictions anywhere in the genome (top) and also for models that can make predictions only on predefined regions such as exon boundaries (bottom). <bold>c</bold>, Generic command for variant effect prediction. <bold>d</bold>, Generic command to compute the importance scores using in silico mutagenesis. <bold>e</bold>, Feature importance scores visualized as a mutation map (heat map: blue, negative effect; red, positive effect) for variant rs35703285 and the predicted GATA2 binding difference between alleles for four different models. The black boxes in the mutation maps highlight the position and the alternative allele of the respective variant. Stars highlight variants annotated in the human variant database ClinVar, with red indicating likely pathogenic; green, likely benign; gray, uncertain, conflicting significance, and any other type.</p></caption><graphic xlink:href="41587_2019_140_Fig4_HTML" id="d29e801"/></fig></p><p id="Par14">To inspect genomic regions containing the variant in higher detail, variant effect predictions for all possible single nucleotide variants in the sequence can be computed using a single command (Fig. <xref rid="Fig4" ref-type="fig">4d</xref>) and visualized as a mutation map (Fig. <xref rid="Fig4" ref-type="fig">4e</xref>). This helps to assess the predicted impact of a variant of interest in the context of other possible variants in the genomic region and may help pinpoint affected <italic>cis</italic>-regulatory elements. For example, the mutation maps for transcription factor binding sites of GATA2 show that the first four models from Fig. <xref rid="Fig2" ref-type="fig">2</xref> agree on the effect of the variant rs35703285. Interestingly, the three most complex models (lsgkm-SVM, DeepBind and DeepSEA) predict effects of similar strength further away from the core motifs. This likely reflects that these models capture further regulatory sequences beyond the core motif. The variant rs35703285 has previously been classified as pathogenic in the ClinVar dataset and is linked to &#x003b2;-thalassemia (MedGen: C0005283), a disease that reduces synthesis of the hemoglobin subunit &#x003b2; (hemoglobin &#x003b2; chain) and results in microcytic, hypochromic anemia. The mutation map indicates that similar loss of GATA2 binding can be expected from other variants in the region.</p><p id="Par15">In addition to in silico mutagenesis, which only applies to sequences, Kipoi provides a plugin that can evaluate the influence for any type of input on model prediction by implementing feature importance algorithms, including saliency maps<sup><xref ref-type="bibr" rid="CR21">21</xref></sup> and DeepLIFT<sup><xref ref-type="bibr" rid="CR22">22</xref></sup>. These algorithms can offer complementary insights and are computationally more efficient than in silico mutagenesis.</p></sec><sec id="Sec4"><title>Predicting pathogenic splice variants by combining models</title><p id="Par16">State-of-the-art models performing variant effect prediction frequently combine scores from multiple models. The advantage is twofold. First, combined scores can cover multiple biological processes. Second, combined scores are more robust because they average out conflicting predictions of individual models. Combining models or scores can be easily done in Kipoi by leveraging the standardization and modularity of models in combination with the variant effect prediction plugin introduced above. As a proof of concept, we used Kipoi to define a pathogenicity score of variants located near splice sites by integrating four predictive models covering complementary aspects of splicing (Fig. <xref rid="Fig5" ref-type="fig">5a</xref>) into a single composite model.<fig id="Fig5"><label>Fig. 5</label><caption><title>Composite models using Kipoi for improved pathogenic splice variant scoring.</title><p><bold>a</bold>, Illustration of composite modeling for mRNA splicing. A model trained to distinguish pathogenic from benign splicing region variants is easily constructed by combining Kipoi models for complementary aspects of splicing regulation (MaxEntScan 3&#x02032; models the acceptor site, MaxEntScan 5&#x02032; and HAL model the donor site, LaBranchoR models the branchpoint) and phylogenetic conservation. These variant scores are combined by logistic regression to predict the variant pathogenicity (orange box). <bold>b</bold>, Different versions of the ensemble model were trained and evaluated in tenfold cross-validation for the dbscSNV and ClinVar datasets (<xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>). The four leftmost models are incrementally added to the composite model in chronological order of their publication: the leftmost point only uses information from the MaxEntScan 3&#x02032; model, while &#x0201c;+ conservation (KipoiSplice4)&#x0201d; uses all four models and phylogenetic conservation. These performances were compared to a logistic regression model using state-of-the-art splicing variant effect predictors (SPIDEX, SPIDEX + conservation, dbscSNV). KipoiSplice4 achieves state-of-the-art performance on the dbscSNV dataset and outperforms alternative models on ClinVar, which contains a broader range of variants. auROC, area under the receiver operating characteristics curve. <bold>c</bold>, Fraction of unscored variants for different models in the dbscSNV and ClinVar datasets.</p></caption><graphic xlink:href="41587_2019_140_Fig5_HTML" id="d29e855"/></fig></p><p id="Par17">Splicing defects are one of the most frequent causes of genetic disease. In the first step of splicing, the donor site is attacked by an intronic adenosine to form a branchpoint. In the second step, the acceptor site is cleaved and spliced (i.e., joined) to the 3&#x02032; end of the donor site. To cover variants possibly affecting splicing through different mechanisms, we considered four complementary models trained on different types of data. The first two models were 5&#x02032; and 3&#x02032; MaxEntScan, which are based on a probabilistic model that scores donor and acceptor site regions and was trained on splice sites with cDNA support<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>; the third model was HAL, a <italic>k</italic>-mer based linear regression model scoring donor site regions that was trained on a massively parallel reporter assay in which hundreds of thousands of random sequences probed the donor site sequence space<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>; and the fourth model was LaBranchoR, a deep-learning model scoring the region upstream of the acceptor site for possible branchpoint locations that was trained from experimentally mapped branchpoints<sup><xref ref-type="bibr" rid="CR11">11</xref>,<xref ref-type="bibr" rid="CR23">23</xref></sup>.</p><p id="Par18">Although MaxEntScan can be easily applied to score genetic variants provided in VCF files through Ensembl&#x02019;s variant effect predictor plugin<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, HAL and LaBranchoR do not offer this functionality out of the box. Using Kipoi&#x02019;s API, the variant effect prediction is standardized for all these models (Fig. <xref rid="Fig5" ref-type="fig">5a</xref>). We built a new Kipoi model, KipoiSplice4, which is a logistic regression model based on variant effect predictions of these four Kipoi models and phylogenetic conservation scores (<xref rid="MOESM1" ref-type="media">Supplementary Methods</xref> and Fig. <xref rid="Fig5" ref-type="fig">5a</xref>). This combined model was trained on two different datasets of splice variants classified either as pathogenic or benign (dbscSNV and ClinVar; <xref rid="MOESM1" ref-type="media">Supplementary Methods</xref>).</p><p id="Par19">To illustrate the benefit of integrating multiple models, we incrementally added the four splicing models in the chronological order of model publication. With an increasing number of models, the performance increased in both dbscSNV and ClinVar datasets (Fig. <xref rid="Fig5" ref-type="fig">5b</xref>, left four methods). Next we evaluated the model performance against two state-of-the-art splicing scores: another integrative approach that predicts pathogenic splicing-affecting variants, dbscSNV<sup><xref ref-type="bibr" rid="CR25">25</xref></sup>, and SPIDEX<sup><xref ref-type="bibr" rid="CR26">26</xref></sup>. For a fair comparison, we furthermore trained a score combining SPIDEX and phylogenetic conservation on each dataset, which reached the same performance as the dbscSNV model on ClinVar. While the performance of KipoiSplice4 is similar to that of dbscSNV for the dbscSNV dataset, KipoiSplice4 outperforms all other methods on the ClinVar dataset. One reason for the better performance of KipoiSplice4 is that it scores more variants (Fig. <xref rid="Fig5" ref-type="fig">5c</xref>). Neither SPIDEX nor dbscSNV explicitly models the splicing branchpoint, while KipoiSplice4 does so using LaBranchoR.</p><p id="Par20">By wrapping the individual models into a data-loader, we made the ensemble model KipoiSplice4 available in Kipoi. KipoiSplice4 can hence be executed on demand to de novo predict effects of variants in splice sites. Altogether, by wrapping existing splice models into Kipoi, and thereby leveraging the out-of-the-box variant effect prediction, we developed a state-of-the-art model for scoring the pathogenicity of splicing variants. Additionally, with new splicing models and more extensive training datasets of better quality being published, the ensemble model can be easily and transparently improved.</p></sec><sec id="Sec5"><title>A unique resource</title><p id="Par21">We have introduced a repository and programmatic standard for sharing and reuse of trained models in genomics, thereby addressing an unmet need. The Kipoi model repository is dedicated to trained models with applications in genomics in the broad sense. Specifically, we request at least one input data modality that can be derived either from DNA sequence (which includes amino acid sequence) or from an -omics assay, such as ChIP-seq or protein mass spectrometry. By providing a unified interface to models, automated installation, and nightly tests, Kipoi streamlines the application of trained models, overcomes the technical hurdles of their deployment, improves their dissemination, and ultimately facilitates reproducible research. The use cases we have presented demonstrate that Kipoi greatly facilitates the execution and comparison of alternative models for the same task, standardizes their use to functionally interpret genetic variants, and facilitates the development of new models based on existing ones, either by means of transfer learning or by model combination.</p><p id="Par22">The dissemination and sharing of trained models offers key advantages over either sharing precomputed predictions or sharing code for users to train models from scratch. Precomputed predictions are limited to a narrow set of predefined input data. In particular, for DNA sequence variations, the combinatorial growth of possible sequence variants renders this approach impractical in terms of storage and compute requirements. For example, storing variant effect predictions is technically impossible even for relatively short (&#x0003c;10 bp) indels. Conversely, retraining models from scratch is technically challenging and requires access to potentially large training dataset, as well as suitable computational resources. Trained machine learning models can be regarded as functions encoding data distributions<sup><xref ref-type="bibr" rid="CR27">27</xref></sup>. We anticipate the relevance of sharing trained models increasing as larger datasets are becoming available, with repositories such as Kipoi filling an important gap between code repositories and data archives.</p><p id="Par23">Transfer learning appears to be a promising avenue for training models when data are scarce. Using prediction of DNA accessibility as an example, we have illustrated the potential of transfer learning in a favorable scenario where multiple related datasets and tasks are available. The utility of transfer learning depends on how similar the new prediction task is to those of available models. Although the definition of generic measures for task similarity is an open research question, trial and error is a viable and pragmatic strategy to design transfer learning schemes because it is computationally cheap compared to exploring model architectures and parameter settings from scratch. A starting point for this search is to use models trained for tasks involving related biological processes. For example, the available models trained on in vitro transcription factor binding assays can be good initial models to train in vivo models of the same transcription factors, or models trained on different cell types of tissues. Multi-task models are particularly useful because they capture multiple biological processes, some of which might be relevant for the new task.</p><p id="Par24">At the core of our contribution is an API, a unified way for software components to interact with any of these models. APIs provide modularity to software design and help to reduce code redundancy. We have demonstrated the utility of the API, which provides a generic approach both to carry out variant effect predictions and derive feature importance scores for a wide range of models. These examples are important downstream functionalities that are typically not provided by software implementations of models as provided by authors, or they may be implemented using diverse and inconsistent paradigms and interfaces. We foresee a range of future plugins that are of general use for different models. Additionally, it is straightforward to set up new instances of a Kipoi model repository. It could even be adopted in domains other than genomics because the Kipoi API is agnostic to input or output data types and machine learning frameworks.</p><p id="Par25">While complying to a programmatic standard can constrain contributors and provide some initial overhead to adapting legacy software, the long-term community benefits from the standardization will outweigh short-term investments. The open software project Bioconductor and the data archive Gene Expression Omnibus are canonical examples of the expected gains. These frameworks achieve a suitable compromise between rigidly enforced structure and no structure. With this in mind, we have designed Kipoi&#x02019;s API to rigorously specify specific aspects, such as providing example files to test model executability, while leaving other choices, such as the machine learning modeling framework, open to developers. We anticipate that community usage will help to develop good practices and find a reasonable balance between standardization and flexibility.</p><p id="Par26">An exciting next step would be to set up open challenges for key predictive tasks in genomics with open challenge platforms, like DREAM (<ext-link ext-link-type="uri" xlink:href="http://dreamchallenges.org">http://dreamchallenges.org</ext-link>) or CAGI (<ext-link ext-link-type="uri" xlink:href="https://genomeinterpretation.org">https://genomeinterpretation.org</ext-link>), and make the best models available in Kipoi. This would simplify and modularize the development of predictive models into three steps: first, designing training and evaluation datasets (challenge organizers); second, training the best model (challenge competitors); and third, making the model easily available for others to use (repository of trained models). Such modularization would lower the entry barrier for newcomers as well as machine learning practitioners lacking domain expertise. Moreover, as models and training datasets continue to evolve, such best-in-class models could be continuously updated and made immediately available to all. Kipoi provides important elements to this end: a standardization for data loading and model execution, nightly tests, and a central repository.</p><p id="Par27">A repository of interoperable models opens the possibility of building composite models that capture how genetic variation propagates through successive biological processes. Such a sequential, modular modeling offers several advantages. First, end-to-end fitting of a complex trait such as a cellular behavior or the expression level of a gene can be too difficult because the amount of data is too scarce compared to the complexity of the phenomena. In contrast, today&#x02019;s high-throughput technologies focusing on a specific subprocess offer more data at higher accuracy. For example, massively parallel reporter assays allow saturated screens in which almost the complete combinatorial sequence space can be probed for the selected molecular processes. Hence accurate models may be obtained for these elementary tasks and serve as building blocks for modeling more complex tasks. Second, modularity is a hallmark of biological processes as the same proteins are often involved in multiple processes. We therefore anticipate fruitful cross-talk between modelers sharing individual components useful for different modeling tasks. Third, such an approach would lead to models that are interpretable in terms of simpler biological processes, as opposed to black box predictors. Whether and how predictive models of elementary steps can be sequentially combined and jointly fitted to model multiple higher order biological processes of increasing complexity is an exciting research direction. Altogether, we foresee Kipoi being a catalyst in the endeavor to model complex phenotypes from genotype.</p></sec><sec sec-type="supplementary-material"><title>Supplementary information</title><sec id="Sec6"><p>
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="41587_2019_140_MOESM1_ESM.pdf"><label>Supplementary Information</label><caption><p>Supplementary Fig. 1, Supplementary Tables 1 and 2, and Supplementary Methods</p></caption></media></supplementary-material>
</p></sec></sec></body><back><fn-group><fn><p>
<italic>Editor&#x02019;s Note: This article has been peer-reviewed.</italic>
</p></fn><fn><p>These authors contributed equally: &#x0017d;iga Avsec, Roman Kreuzhuber.</p></fn></fn-group><sec><title>Supplementary information</title><p><bold>Supplementary information</bold> is available for this paper at 10.1038/s41587-019-0140-0.</p></sec><ack><title>Acknowledgements</title><p>We thank C.-S. Foo for early discussion on the manuscript and N. Zupan for implementing the website. We thank D. Quang for providing help with FactorNet and trained models for CEBPB and MAFK. We thank W. Huber for feedback on the manuscript. &#x0017d;.A. and J.C. were supported by a Deutsche Forschungsgemeinschaft fellowship through the Graduate School of Quantitative Biosciences Munich. &#x0017d;.A. and T.B. were supported by the German Bundesministerium f&#x000fc;r Bildung und Forschung (BMBF) through the project MechML (01IS18053F). J.C. was supported by the Competence Network for Technical, Scientific High Performance Computing in Bavaria KONWIHR. L.U. received support from core funding of the European Molecular Biology Laboratory and the European Union&#x02019;s Horizon 2020 research and innovation programme (grant agreement number N635290). J.I. is supported by a Stanford BioX Fellowship. A.S. is supported by an HHMI International Student Research Fellowship and a Stanford BioX Fellowship. D.S.K. is supported by a Stanford BioX Fellowship. A.B. is supported by NIH grant 1DP2OD022870. A.K. is supported by NIH grants 1DP2OD022870 and 1U01HG009431. This work was supported by an NVIDIA hardware grant providing a Titan X GPU card.</p></ack><notes notes-type="author-contribution"><title>Author contributions</title><p>&#x0017d;.A., R.K., J.I., A.S., A.K., O.S. and J.G. conceived the Kipoi API. &#x0017d;.A., R.K. and T.B. implemented the Kipoi API. &#x0017d;.A. and R.K. conceived and implemented kipoi_veff. &#x0017d;.A., R.K. and A.S. conceived and implemented kipoi-interpret. &#x0017d;.A., R.K. and J.C. conceived and implemented kipoiseq. &#x0017d;.A., R.K., J.I., N.X. and A.B. performed the analysis. D.S.K. compiled the DNA accessibility dataset. &#x0017d;.A., R.K., J.I., N.X., A.S. and L.U. contributed models to the repository. A.K., O.S. and J.G. designed and supervised research. &#x0017d;.A., R.K., A.K., O.S. and J.G. wrote the manuscript.</p></notes><notes notes-type="data-availability"><title>Data availability</title><p>All models used in this analysis are available at 10.5281/zenodo.1637796. The model configuration files in the repository link to model parameters stored in specific Zenodo digital objects and are therefore guaranteed to be reproducible and openly available. Chromatin accessibility data used for training and evaluating Divergent421 in the transfer-learning section is available at 10.5281/zenodo.2615128 in the manuscript/data/raw/tlearn directory.</p></notes><notes notes-type="data-availability"><title>Code availability</title><p>Kipoi, kipoiseq, kipoi_veff, and kipoi_interpret are available as python packages on PyPI and their source code is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/kipoi">https://github.com/kipoi/kipoi</ext-link>, <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/kipoiseq">https://github.com/kipoi/kipoiseq</ext-link>, <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/kipoi-veff">https://github.com/kipoi/kipoi-veff</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/kipoi-interpret">https://github.com/kipoi/kipoi-interpret</ext-link>, correspondingly. Models are hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/models">https://github.com/kipoi/models</ext-link>. Analysis was performed with the following versions: kipoi = 0.6.4, kipoiseq = 0.2.2, kipoi_veff = 0.1.0, kipoi_interpret = 0.1.0, model repository with 5a93b7b7ae1842c35b0052e2c17afda15ec8a890 commit SHA-1 hash. Code to reproduce the results is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/kipoi/manuscript">https://github.com/kipoi/manuscript</ext-link>. Code and data are also available at 10.5281/zenodo.2615128.</p></notes><notes notes-type="COI-statement"><title>Competing interests</title><p id="Par28">The authors declare no competing interests.</p></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ching</surname><given-names>T</given-names></name><etal/></person-group><source>J. R. Soc. Interface</source><year>2018</year><volume>15</volume><fpage>20170387</fpage><pub-id pub-id-type="doi">10.1098/rsif.2017.0387</pub-id><pub-id pub-id-type="pmid">29618526</pub-id></element-citation></ref><ref id="CR2"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Luo</surname><given-names>R</given-names></name><name><surname>Sedlazeck</surname><given-names>FJ</given-names></name><name><surname>Lam</surname><given-names>T-W</given-names></name><name><surname>Schatz</surname><given-names>MC</given-names></name></person-group><source>Nat. Commun.</source><year>2019</year><volume>10</volume><fpage>998</fpage><pub-id pub-id-type="doi">10.1038/s41467-019-09025-z</pub-id><pub-id pub-id-type="pmid">30824707</pub-id></element-citation></ref><ref id="CR3"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Poplin</surname><given-names>R</given-names></name><etal/></person-group><source>Nat. Biotechnol.</source><year>2018</year><volume>36</volume><fpage>983</fpage><lpage>987</lpage><pub-id pub-id-type="doi">10.1038/nbt.4235</pub-id><pub-id pub-id-type="pmid">30247488</pub-id></element-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kim</surname><given-names>HK</given-names></name><etal/></person-group><source>Nat. Biotechnol.</source><year>2018</year><volume>36</volume><fpage>239</fpage><lpage>241</lpage><pub-id pub-id-type="doi">10.1038/nbt.4061</pub-id><pub-id pub-id-type="pmid">29431740</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chuai</surname><given-names>G</given-names></name><etal/></person-group><source>Genome Biol.</source><year>2018</year><volume>19</volume><fpage>80</fpage><pub-id pub-id-type="doi">10.1186/s13059-018-1459-4</pub-id><pub-id pub-id-type="pmid">29945655</pub-id></element-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alipanahi</surname><given-names>B</given-names></name><name><surname>Delong</surname><given-names>A</given-names></name><name><surname>Weirauch</surname><given-names>MT</given-names></name><name><surname>Frey</surname><given-names>BJ</given-names></name></person-group><source>Nat. Biotechnol.</source><year>2015</year><volume>33</volume><fpage>831</fpage><lpage>838</lpage><pub-id pub-id-type="doi">10.1038/nbt.3300</pub-id><pub-id pub-id-type="pmid">26213851</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhou</surname><given-names>J</given-names></name><name><surname>Troyanskaya</surname><given-names>OG</given-names></name></person-group><source>Nat. Methods</source><year>2015</year><volume>12</volume><fpage>931</fpage><lpage>934</lpage><pub-id pub-id-type="doi">10.1038/nmeth.3547</pub-id><pub-id pub-id-type="pmid">26301843</pub-id></element-citation></ref><ref id="CR8"><label>8.</label><mixed-citation publication-type="other">Quang, D. &#x00026; Xie, X. FactorNet: a deep learning framework for predicting cell type specific transcription factor binding from nucleotide-resolution sequential data. Preprint at 10.1101/151274 (2017).</mixed-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yeo</surname><given-names>G</given-names></name><name><surname>Burge</surname><given-names>CB</given-names></name></person-group><source>J. Comput. Biol.</source><year>2004</year><volume>11</volume><fpage>377</fpage><lpage>394</lpage><pub-id pub-id-type="doi">10.1089/1066527041410418</pub-id><pub-id pub-id-type="pmid">15285897</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rosenberg</surname><given-names>AB</given-names></name><name><surname>Patwardhan</surname><given-names>RP</given-names></name><name><surname>Shendure</surname><given-names>J</given-names></name><name><surname>Seelig</surname><given-names>G</given-names></name></person-group><source>Cell</source><year>2015</year><volume>163</volume><fpage>698</fpage><lpage>711</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.09.054</pub-id><pub-id pub-id-type="pmid">26496609</pub-id></element-citation></ref><ref id="CR11"><label>11.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Paggi</surname><given-names>JM</given-names></name><name><surname>Bejerano</surname><given-names>G</given-names></name></person-group><source>RNA</source><year>2018</year><volume>24</volume><fpage>1647</fpage><lpage>1658</lpage><pub-id pub-id-type="doi">10.1261/rna.066290.118</pub-id><pub-id pub-id-type="pmid">30224349</pub-id></element-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gentleman</surname><given-names>RC</given-names></name><etal/></person-group><source>Genome Biol.</source><year>2004</year><volume>5</volume><fpage>R80</fpage><pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id><pub-id pub-id-type="pmid">15461798</pub-id></element-citation></ref><ref id="CR13"><label>13.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gr&#x000fc;ning</surname><given-names>B</given-names></name><etal/></person-group><source>Nat. Methods</source><year>2018</year><volume>15</volume><fpage>475</fpage><lpage>476</lpage><pub-id pub-id-type="doi">10.1038/s41592-018-0046-7</pub-id><pub-id pub-id-type="pmid">29967506</pub-id></element-citation></ref><ref id="CR14"><label>14.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Beaulieu-Jones</surname><given-names>BK</given-names></name><name><surname>Greene</surname><given-names>CS</given-names></name></person-group><source>Nat. Biotechnol.</source><year>2017</year><volume>35</volume><fpage>342</fpage><lpage>346</lpage><pub-id pub-id-type="doi">10.1038/nbt.3780</pub-id><pub-id pub-id-type="pmid">28288103</pub-id></element-citation></ref><ref id="CR15"><label>15.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ghandi</surname><given-names>M</given-names></name><name><surname>Lee</surname><given-names>D</given-names></name><name><surname>Mohammad-Noori</surname><given-names>M</given-names></name><name><surname>Beer</surname><given-names>MA</given-names></name></person-group><source>PLOS Comput. Biol.</source><year>2014</year><volume>10</volume><fpage>e1003711</fpage><pub-id pub-id-type="doi">10.1371/journal.pcbi.1003711</pub-id><pub-id pub-id-type="pmid">25033408</pub-id></element-citation></ref><ref id="CR16"><label>16.</label><mixed-citation publication-type="other">Yosinski, J., Clune, J., Bengio, Y. &#x00026; Lipson, H. How transferable are features in deep neural networks? in <italic>Advances in Neural Information Processing Systems 27</italic> (eds. Ghahramani, Z. et al.) 3320&#x02013;3328 (Curran Associates, 2014).</mixed-citation></ref><ref id="CR17"><label>17.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Esteva</surname><given-names>A</given-names></name><etal/></person-group><source>Nature</source><year>2017</year><volume>542</volume><fpage>115</fpage><lpage>118</lpage><pub-id pub-id-type="doi">10.1038/nature21056</pub-id><pub-id pub-id-type="pmid">28117445</pub-id></element-citation></ref><ref id="CR18"><label>18.</label><mixed-citation publication-type="other">Howard, J. &#x00026; Ruder, S. Universal language model fine-tuning for text classification. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1801.06146">https://arxiv.org/abs/1801.06146</ext-link> (2018).</mixed-citation></ref><ref id="CR19"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kelley</surname><given-names>DR</given-names></name><name><surname>Snoek</surname><given-names>J</given-names></name><name><surname>Rinn</surname><given-names>JL</given-names></name></person-group><source>Genome Res.</source><year>2016</year><volume>26</volume><fpage>990</fpage><lpage>999</lpage><pub-id pub-id-type="doi">10.1101/gr.200535.115</pub-id><pub-id pub-id-type="pmid">27197224</pub-id></element-citation></ref><ref id="CR20"><label>20.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zeng</surname><given-names>H</given-names></name><name><surname>Gifford</surname><given-names>DK</given-names></name></person-group><source>Nucleic Acids Res.</source><year>2017</year><volume>45</volume><fpage>e99</fpage><pub-id pub-id-type="doi">10.1093/nar/gkx177</pub-id><pub-id pub-id-type="pmid">28334830</pub-id></element-citation></ref><ref id="CR21"><label>21.</label><mixed-citation publication-type="other">Simonyan, K., Vedaldi, A. &#x00026; Zisserman, A. Deep inside convolutional networks: visualising image classification models and saliency maps. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1312.6034">https://arxiv.org/abs/1312.6034</ext-link> (2013).</mixed-citation></ref><ref id="CR22"><label>22.</label><mixed-citation publication-type="other">Shrikumar, A., Greenside, P. &#x00026; Kundaje, A. Learning important features through propagating activation differences. <italic>Proceedings of the 34th International Conference on Machine Learning, PMLR</italic><bold>70</bold>, 3145&#x02013;3153 (2017).</mixed-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mercer</surname><given-names>TR</given-names></name><etal/></person-group><source>Genome Res.</source><year>2015</year><volume>25</volume><fpage>290</fpage><lpage>303</lpage><pub-id pub-id-type="doi">10.1101/gr.182899.114</pub-id><pub-id pub-id-type="pmid">25561518</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McLaren</surname><given-names>W</given-names></name><etal/></person-group><source>Genome Biol.</source><year>2016</year><volume>17</volume><fpage>122</fpage><pub-id pub-id-type="doi">10.1186/s13059-016-0974-4</pub-id><pub-id pub-id-type="pmid">27268795</pub-id></element-citation></ref><ref id="CR25"><label>25.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dong</surname><given-names>C</given-names></name><etal/></person-group><source>Hum. Mol. Genet.</source><year>2015</year><volume>24</volume><fpage>2125</fpage><lpage>2137</lpage><pub-id pub-id-type="doi">10.1093/hmg/ddu733</pub-id><pub-id pub-id-type="pmid">25552646</pub-id></element-citation></ref><ref id="CR26"><label>26.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Xiong</surname><given-names>HY</given-names></name><name><surname>Alipanahi</surname><given-names>B</given-names></name><name><surname>Lee</surname><given-names>LJ</given-names></name></person-group><source>Science</source><year>2015</year><volume>347</volume><fpage>1254806</fpage><pub-id pub-id-type="doi">10.1126/science.1254806</pub-id><pub-id pub-id-type="pmid">25525159</pub-id></element-citation></ref><ref id="CR27"><label>27.</label><mixed-citation publication-type="other">Murphy, K. P. <italic>Machine Learning: A Probabilistic Perspective</italic> (MIT Press, 2012).</mixed-citation></ref><ref id="CR28"><label>28.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kulakovskiy</surname><given-names>IV</given-names></name><etal/></person-group><source>Nucleic Acids Res.</source><year>2016</year><volume>44</volume><issue>D1</issue><fpage>D116</fpage><lpage>D125</lpage><pub-id pub-id-type="doi">10.1093/nar/gkv1249</pub-id><pub-id pub-id-type="pmid">26586801</pub-id></element-citation></ref></ref-list></back></article>